{
    "configurations": [

        {
            "type": "chrome",
            "name": "http://import { render, screen, fireEvent } from '@testing-library/react';import CommonCheckTable from './checktable';import { Provider } from 'react-redux';import { configureStore } from '@reduxjs/toolkit';import advanceSearchSlice from '../../redux/slices/advanceSearchSlice'; constmockColumnData = [  { Header: 'Name', accessor: 'name', type: 'text'},  { Header: 'Email', accessor: 'email' type: 'email'},  { Header: 'Phone', accessor: 'phone' },];const mockData = [  { name: 'John Doe', email: 'john.doe@example.com', phone: '123-456-7890' },  { name: 'Jane Doe', email: 'jane.doe@example.com', phone: '987-654-3210' },];const mockTableCustomFields = [  { name: 'name', type: 'text' },  { name: 'email', type: 'email' },];const mockAccess = {  create: true,  delete: true,};const setup = (props = {}) => {  const store = configureStore({    reducer: {      advanceSearchData: advanceSearchSlice,    },  });  render(    <Provider store={store}>      <CommonCheckTable {...props} />    </Provider>  );};describe('CommonCheckTable', () => {  it('renders the table with correct title', () => {    setup({ title: 'My Table' });    expect(screen.getByText('My Table')).toBeInTheDocument();  });  it('renders the table with correct data', () => {    setup({ columnData: mockColumnData, allData: mockData });    expect(screen.getByText('John Doe')).toBeInTheDocument();    expect(screen.getByText('Jane Doe')).toBeInTheDocument();  });  it('renders the table with correct columns', () => {    setup({ columnData: mockColumnData });    expect(screen.getByText('Name')).toBeInTheDocument();    expect(screen.getByText('Email')).toBeInTheDocument();    expect(screen.getByText('Phone')).toBeInTheDocument();  });  it('renders the add new button', () => {    setup({ access: mockAccess });    expect(screen.getByRole('button', { name: 'Add New' })).toBeInTheDocument();  });  it('renders the advance search button', () => {    setup({ AdvanceSearch: true });    expect(screen.getByRole('button', { name: 'Advance Search' })).toBeInTheDocument();  });  it('renders the clear search button', () => {    setup({ searchDisplay: true });    expect(screen.getByRole('button', { name: 'Clear' })).toBeInTheDocument();  });  it('renders the manage columns menu', () => {    setup({ ManageGrid: true });    expect(screen.getByRole('button', { name: 'Manage Columns' })).toBeInTheDocument();  });  it('opens the manage columns modal', () => {    setup({ ManageGrid: true });    fireEvent.click(screen.getByRole('button', { name: 'Manage Columns' }));    expect(screen.getByText('Manage Columns')).toBeInTheDocument();  });  it('renders the export buttons', () => {    setup({ allData: mockData });    expect(screen.getByRole('button', { name: 'Export as CSV' })).toBeInTheDocument();    expect(screen.getByRole('button', { name: 'Export as Excel' })).toBeInTheDocument();  });  it('renders the pagination component', () => {    setup({ allData: mockData });    expect(screen.getByRole('button', { name: 'Previous' })).toBeInTheDocument();    expect(screen.getByRole('button', { name: 'Next' })).toBeInTheDocument();  });  it('handles search input', () => {    setup({ allData: mockData, customSearch: true });    const searchInput = screen.getByRole('textbox', { name: 'Search' });    fireEvent.change(searchInput, { target: { value: 'John' } });    expect(searchInput.value).toBe('John');  });  it('handles advance search', () => {    setup({ allData: mockData, AdvanceSearch: true, tableCustomFields: mockTableCustomFields });    fireEvent.click(screen.getByRole('button', { name: 'Advance Search' }));    expect(screen.getByText('Advance Search')).toBeInTheDocument();  });  it('handles clear search', () => {    setup({ searchDisplay: true });    fireEvent.click(screen.getByRole('button', { name: 'Clear' }));    // TODO: Assert that search results are cleared  });  it('handles checkbox change', () => {    setup({ allData: mockData, checkBox: true });    const checkbox = screen.getByRole('checkbox', { name: 'John Doe' });    fireEvent.click(checkbox);    expect(checkbox.checked).toBe(true);  });  it('handles column visibility toggle', () => {    setup({ ManageGrid: true, columnData: mockColumnData });    fireEvent.click(screen.getByRole('button', { name: 'Manage Columns' }));    const checkbox = screen.getByRole('checkbox', { name: 'Name' });    fireEvent.click(checkbox);    // TODO: Assert that column visibility is toggled  });  it('handles export to CSV', () => {    setup({ allData: mockData });    fireEvent.click(screen.getByRole('button', { name: 'Export as CSV' }));    // TODO: Assert that CSV file is downloaded  });  it('handles export to Excel', () => {    setup({ allData: mockData });    fireEvent.click(screen.getByRole('button', { name: 'Export as Excel' }));    // TODO: Assert that Excel file is downloaded  });  it('handles delete confirmation', () => {    setup({ access: mockAccess, deleteMany: false });    fireEvent.click(screen.getByRole('button', { name: 'Delete' }));    expect(screen.getByText('Delete Confirmation')).toBeInTheDocument();  });  // Add more tests for other functionalities as needed});",
            "request": "launch",
            "url": "http://import { render, screen, fireEvent } from '@testing-library/react';import CommonCheckTable from './checktable';import { Provider } from 'react-redux';import { configureStore } from '@reduxjs/toolkit';import advanceSearchSlice from '../../redux/slices/advanceSearchSlice';  constmockColumnData = [  { Header: 'Name', accessor: 'name' type: 'text; },  { Header: 'Email', accessor: 'email' type: 'email'},  { Header: 'Phone', accessor: 'phone' },];const mockData = [  { name: 'John Doe', email: 'john.doe@example.com', phone: '123-456-7890' },  { name: 'Jane Doe', email: 'jane.doe@example.com', phone: '987-654-3210' },];const mockTableCustomFields = [  { name: 'name', type: 'text' },  { name: 'email', type: 'email' },];const mockAccess = {  create: true,  delete: true,};const setup = (props = {}) => {  const store = configureStore({    reducer: {      advanceSearchData: advanceSearchSlice,    },  });  render(    <Provider store={store}>      <CommonCheckTable {...props} />    </Provider>  );};describe('CommonCheckTable', () => {  it('renders the table with correct title', () => {    setup({ title: 'My Table' });    expect(screen.getByText('My Table')).toBeInTheDocument();  });  it('renders the table with correct data', () => {    setup({ columnData: mockColumnData, allData: mockData });    expect(screen.getByText('John Doe')).toBeInTheDocument();    expect(screen.getByText('Jane Doe')).toBeInTheDocument();  });  it('renders the table with correct columns', () => {    setup({ columnData: mockColumnData });    expect(screen.getByText('Name')).toBeInTheDocument();    expect(screen.getByText('Email')).toBeInTheDocument();    expect(screen.getByText('Phone')).toBeInTheDocument();  });  it('renders the add new button', () => {    setup({ access: mockAccess });    expect(screen.getByRole('button', { name: 'Add New' })).toBeInTheDocument();  });  it('renders the advance search button', () => {    setup({ AdvanceSearch: true });    expect(screen.getByRole('button', { name: 'Advance Search' })).toBeInTheDocument();  });  it('renders the clear search button', () => {    setup({ searchDisplay: true });    expect(screen.getByRole('button', { name: 'Clear' })).toBeInTheDocument();  });  it('renders the manage columns menu', () => {    setup({ ManageGrid: true });    expect(screen.getByRole('button', { name: 'Manage Columns' })).toBeInTheDocument();  });  it('opens the manage columns modal', () => {    setup({ ManageGrid: true });    fireEvent.click(screen.getByRole('button', { name: 'Manage Columns' }));    expect(screen.getByText('Manage Columns')).toBeInTheDocument();  });  it('renders the export buttons', () => {    setup({ allData: mockData });    expect(screen.getByRole('button', { name: 'Export as CSV' })).toBeInTheDocument();    expect(screen.getByRole('button', { name: 'Export as Excel' })).toBeInTheDocument();  });  it('renders the pagination component', () => {    setup({ allData: mockData });    expect(screen.getByRole('button', { name: 'Previous' })).toBeInTheDocument();    expect(screen.getByRole('button', { name: 'Next' })).toBeInTheDocument();  });  it('handles search input', () => {    setup({ allData: mockData, customSearch: true });    const searchInput = screen.getByRole('textbox', { name: 'Search' });    fireEvent.change(searchInput, { target: { value: 'John' } });    expect(searchInput.value).toBe('John');  });  it('handles advance search', () => {    setup({ allData: mockData, AdvanceSearch: true, tableCustomFields: mockTableCustomFields });    fireEvent.click(screen.getByRole('button', { name: 'Advance Search' }));    expect(screen.getByText('Advance Search')).toBeInTheDocument();  });  it('handles clear search', () => {    setup({ searchDisplay: true });    fireEvent.click(screen.getByRole('button', { name: 'Clear' }));    // TODO: Assert that search results are cleared  });  it('handles checkbox change', () => {    setup({ allData: mockData, checkBox: true });    const checkbox = screen.getByRole('checkbox', { name: 'John Doe' });    fireEvent.click(checkbox);    expect(checkbox.checked).toBe(true);  });  it('handles column visibility toggle', () => {    setup({ ManageGrid: true, columnData: mockColumnData });    fireEvent.click(screen.getByRole('button', { name: 'Manage Columns' }));    const checkbox = screen.getByRole('checkbox', { name: 'Name' });    fireEvent.click(checkbox);    // TODO: Assert that column visibility is toggled  });  it('handles export to CSV', () => {    setup({ allData: mockData });    fireEvent.click(screen.getByRole('button', { name: 'Export as CSV' }));    // TODO: Assert that CSV file is downloaded  });  it('handles export to Excel', () => {    setup({ allData: mockData });    fireEvent.click(screen.getByRole('button', { name: 'Export as Excel' }));    // TODO: Assert that Excel file is downloaded  });  it('handles delete confirmation', () => {    setup({ access: mockAccess, deleteMany: false });    fireEvent.click(screen.getByRole('button', { name: 'Delete' }));    expect(screen.getByText('Delete Confirmation')).toBeInTheDocument();  });  // Add more tests for other functionalities as needed});"
        }
    ]
}